# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from root import message_pb2 as root_dot_message__pb2


class EmployeeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.employeeCreate = channel.unary_unary(
                '/EmployeeService/employeeCreate',
                request_serializer=root_dot_message__pb2.EmployeeCreateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.employeeRead = channel.unary_unary(
                '/EmployeeService/employeeRead',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.EmployeeReadResponse.FromString,
                )
        self.employeeUpdate = channel.unary_unary(
                '/EmployeeService/employeeUpdate',
                request_serializer=root_dot_message__pb2.EmployeeUpdateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.employeeDelete = channel.unary_unary(
                '/EmployeeService/employeeDelete',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.OkMessage.FromString,
                )
        self.employeeList = channel.unary_unary(
                '/EmployeeService/employeeList',
                request_serializer=root_dot_message__pb2.EmployeeListRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.EmployeeListResponse.FromString,
                )


class EmployeeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def employeeCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def employeeRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def employeeUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def employeeDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def employeeList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmployeeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'employeeCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.employeeCreate,
                    request_deserializer=root_dot_message__pb2.EmployeeCreateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'employeeRead': grpc.unary_unary_rpc_method_handler(
                    servicer.employeeRead,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.EmployeeReadResponse.SerializeToString,
            ),
            'employeeUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.employeeUpdate,
                    request_deserializer=root_dot_message__pb2.EmployeeUpdateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'employeeDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.employeeDelete,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.OkMessage.SerializeToString,
            ),
            'employeeList': grpc.unary_unary_rpc_method_handler(
                    servicer.employeeList,
                    request_deserializer=root_dot_message__pb2.EmployeeListRequest.FromString,
                    response_serializer=root_dot_message__pb2.EmployeeListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EmployeeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EmployeeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def employeeCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmployeeService/employeeCreate',
            root_dot_message__pb2.EmployeeCreateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def employeeRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmployeeService/employeeRead',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.EmployeeReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def employeeUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmployeeService/employeeUpdate',
            root_dot_message__pb2.EmployeeUpdateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def employeeDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmployeeService/employeeDelete',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.OkMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def employeeList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EmployeeService/employeeList',
            root_dot_message__pb2.EmployeeListRequest.SerializeToString,
            root_dot_message__pb2.EmployeeListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WeaponServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.weaponCreate = channel.unary_unary(
                '/WeaponService/weaponCreate',
                request_serializer=root_dot_message__pb2.WeaponCreateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.weaponRead = channel.unary_unary(
                '/WeaponService/weaponRead',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.WeaponReadResponse.FromString,
                )
        self.weaponUpdate = channel.unary_unary(
                '/WeaponService/weaponUpdate',
                request_serializer=root_dot_message__pb2.WeaponUpdateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.weaponDelete = channel.unary_unary(
                '/WeaponService/weaponDelete',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.OkMessage.FromString,
                )
        self.weaponList = channel.unary_unary(
                '/WeaponService/weaponList',
                request_serializer=root_dot_message__pb2.WeaponListRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.WeaponListResponse.FromString,
                )


class WeaponServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def weaponCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def weaponRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def weaponUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def weaponDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def weaponList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WeaponServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'weaponCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.weaponCreate,
                    request_deserializer=root_dot_message__pb2.WeaponCreateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'weaponRead': grpc.unary_unary_rpc_method_handler(
                    servicer.weaponRead,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.WeaponReadResponse.SerializeToString,
            ),
            'weaponUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.weaponUpdate,
                    request_deserializer=root_dot_message__pb2.WeaponUpdateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'weaponDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.weaponDelete,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.OkMessage.SerializeToString,
            ),
            'weaponList': grpc.unary_unary_rpc_method_handler(
                    servicer.weaponList,
                    request_deserializer=root_dot_message__pb2.WeaponListRequest.FromString,
                    response_serializer=root_dot_message__pb2.WeaponListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'WeaponService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WeaponService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def weaponCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WeaponService/weaponCreate',
            root_dot_message__pb2.WeaponCreateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def weaponRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WeaponService/weaponRead',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.WeaponReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def weaponUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WeaponService/weaponUpdate',
            root_dot_message__pb2.WeaponUpdateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def weaponDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WeaponService/weaponDelete',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.OkMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def weaponList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WeaponService/weaponList',
            root_dot_message__pb2.WeaponListRequest.SerializeToString,
            root_dot_message__pb2.WeaponListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AmmoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ammoCreate = channel.unary_unary(
                '/AmmoService/ammoCreate',
                request_serializer=root_dot_message__pb2.AmmoCreateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.ammoRead = channel.unary_unary(
                '/AmmoService/ammoRead',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.AmmoReadResponse.FromString,
                )
        self.ammoUpdate = channel.unary_unary(
                '/AmmoService/ammoUpdate',
                request_serializer=root_dot_message__pb2.AmmoUpdateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.ammoDelete = channel.unary_unary(
                '/AmmoService/ammoDelete',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.OkMessage.FromString,
                )
        self.ammoList = channel.unary_unary(
                '/AmmoService/ammoList',
                request_serializer=root_dot_message__pb2.AmmoListRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.AmmoListResponse.FromString,
                )


class AmmoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ammoCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ammoRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ammoUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ammoDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ammoList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AmmoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ammoCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.ammoCreate,
                    request_deserializer=root_dot_message__pb2.AmmoCreateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'ammoRead': grpc.unary_unary_rpc_method_handler(
                    servicer.ammoRead,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.AmmoReadResponse.SerializeToString,
            ),
            'ammoUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.ammoUpdate,
                    request_deserializer=root_dot_message__pb2.AmmoUpdateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'ammoDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.ammoDelete,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.OkMessage.SerializeToString,
            ),
            'ammoList': grpc.unary_unary_rpc_method_handler(
                    servicer.ammoList,
                    request_deserializer=root_dot_message__pb2.AmmoListRequest.FromString,
                    response_serializer=root_dot_message__pb2.AmmoListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AmmoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AmmoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ammoCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AmmoService/ammoCreate',
            root_dot_message__pb2.AmmoCreateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ammoRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AmmoService/ammoRead',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.AmmoReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ammoUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AmmoService/ammoUpdate',
            root_dot_message__pb2.AmmoUpdateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ammoDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AmmoService/ammoDelete',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.OkMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ammoList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AmmoService/ammoList',
            root_dot_message__pb2.AmmoListRequest.SerializeToString,
            root_dot_message__pb2.AmmoListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AssignmentServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.assignmentCreate = channel.unary_unary(
                '/AssignmentService/assignmentCreate',
                request_serializer=root_dot_message__pb2.AssignmentCreateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.assignmentRead = channel.unary_unary(
                '/AssignmentService/assignmentRead',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.AssignmentReadResponse.FromString,
                )
        self.assignmentUpdate = channel.unary_unary(
                '/AssignmentService/assignmentUpdate',
                request_serializer=root_dot_message__pb2.AssignmentUpdateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.assignmentDelete = channel.unary_unary(
                '/AssignmentService/assignmentDelete',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.OkMessage.FromString,
                )
        self.assignmentList = channel.unary_unary(
                '/AssignmentService/assignmentList',
                request_serializer=root_dot_message__pb2.AssignmentListRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.AssignmentListResponse.FromString,
                )


class AssignmentServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def assignmentCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def assignmentRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def assignmentUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def assignmentDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def assignmentList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AssignmentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'assignmentCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.assignmentCreate,
                    request_deserializer=root_dot_message__pb2.AssignmentCreateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'assignmentRead': grpc.unary_unary_rpc_method_handler(
                    servicer.assignmentRead,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.AssignmentReadResponse.SerializeToString,
            ),
            'assignmentUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.assignmentUpdate,
                    request_deserializer=root_dot_message__pb2.AssignmentUpdateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'assignmentDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.assignmentDelete,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.OkMessage.SerializeToString,
            ),
            'assignmentList': grpc.unary_unary_rpc_method_handler(
                    servicer.assignmentList,
                    request_deserializer=root_dot_message__pb2.AssignmentListRequest.FromString,
                    response_serializer=root_dot_message__pb2.AssignmentListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AssignmentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AssignmentService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def assignmentCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AssignmentService/assignmentCreate',
            root_dot_message__pb2.AssignmentCreateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def assignmentRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AssignmentService/assignmentRead',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.AssignmentReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def assignmentUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AssignmentService/assignmentUpdate',
            root_dot_message__pb2.AssignmentUpdateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def assignmentDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AssignmentService/assignmentDelete',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.OkMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def assignmentList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AssignmentService/assignmentList',
            root_dot_message__pb2.AssignmentListRequest.SerializeToString,
            root_dot_message__pb2.AssignmentListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ScheduleServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.scheduleAssignmentsAdd = channel.unary_unary(
                '/ScheduleService/scheduleAssignmentsAdd',
                request_serializer=root_dot_message__pb2.ScheduleAssignmentsAddRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.scheduleAssignmentsList = channel.unary_unary(
                '/ScheduleService/scheduleAssignmentsList',
                request_serializer=root_dot_message__pb2.ScheduleAssignmentsListRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.ScheduleAssignmentsListResponse.FromString,
                )
        self.scheduleCreate = channel.unary_unary(
                '/ScheduleService/scheduleCreate',
                request_serializer=root_dot_message__pb2.ScheduleCreateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.scheduleRead = channel.unary_unary(
                '/ScheduleService/scheduleRead',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.ScheduleReadResponse.FromString,
                )
        self.scheduleUpdate = channel.unary_unary(
                '/ScheduleService/scheduleUpdate',
                request_serializer=root_dot_message__pb2.ScheduleUpdateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.scheduleDelete = channel.unary_unary(
                '/ScheduleService/scheduleDelete',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.OkMessage.FromString,
                )
        self.scheduleList = channel.unary_unary(
                '/ScheduleService/scheduleList',
                request_serializer=root_dot_message__pb2.ScheduleListRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.ScheduleListResponse.FromString,
                )
        self.scheduleReport = channel.unary_unary(
                '/ScheduleService/scheduleReport',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.ScheduleReportResponse.FromString,
                )


class ScheduleServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def scheduleAssignmentsAdd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def scheduleAssignmentsList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def scheduleCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def scheduleRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def scheduleUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def scheduleDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def scheduleList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def scheduleReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ScheduleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'scheduleAssignmentsAdd': grpc.unary_unary_rpc_method_handler(
                    servicer.scheduleAssignmentsAdd,
                    request_deserializer=root_dot_message__pb2.ScheduleAssignmentsAddRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'scheduleAssignmentsList': grpc.unary_unary_rpc_method_handler(
                    servicer.scheduleAssignmentsList,
                    request_deserializer=root_dot_message__pb2.ScheduleAssignmentsListRequest.FromString,
                    response_serializer=root_dot_message__pb2.ScheduleAssignmentsListResponse.SerializeToString,
            ),
            'scheduleCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.scheduleCreate,
                    request_deserializer=root_dot_message__pb2.ScheduleCreateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'scheduleRead': grpc.unary_unary_rpc_method_handler(
                    servicer.scheduleRead,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.ScheduleReadResponse.SerializeToString,
            ),
            'scheduleUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.scheduleUpdate,
                    request_deserializer=root_dot_message__pb2.ScheduleUpdateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'scheduleDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.scheduleDelete,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.OkMessage.SerializeToString,
            ),
            'scheduleList': grpc.unary_unary_rpc_method_handler(
                    servicer.scheduleList,
                    request_deserializer=root_dot_message__pb2.ScheduleListRequest.FromString,
                    response_serializer=root_dot_message__pb2.ScheduleListResponse.SerializeToString,
            ),
            'scheduleReport': grpc.unary_unary_rpc_method_handler(
                    servicer.scheduleReport,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.ScheduleReportResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ScheduleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ScheduleService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def scheduleAssignmentsAdd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ScheduleService/scheduleAssignmentsAdd',
            root_dot_message__pb2.ScheduleAssignmentsAddRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def scheduleAssignmentsList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ScheduleService/scheduleAssignmentsList',
            root_dot_message__pb2.ScheduleAssignmentsListRequest.SerializeToString,
            root_dot_message__pb2.ScheduleAssignmentsListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def scheduleCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ScheduleService/scheduleCreate',
            root_dot_message__pb2.ScheduleCreateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def scheduleRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ScheduleService/scheduleRead',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.ScheduleReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def scheduleUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ScheduleService/scheduleUpdate',
            root_dot_message__pb2.ScheduleUpdateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def scheduleDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ScheduleService/scheduleDelete',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.OkMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def scheduleList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ScheduleService/scheduleList',
            root_dot_message__pb2.ScheduleListRequest.SerializeToString,
            root_dot_message__pb2.ScheduleListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def scheduleReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ScheduleService/scheduleReport',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.ScheduleReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CommonInfoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.commonInfoCreate = channel.unary_unary(
                '/CommonInfoService/commonInfoCreate',
                request_serializer=root_dot_message__pb2.CommonInfoCreateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.commonInfoRead = channel.unary_unary(
                '/CommonInfoService/commonInfoRead',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.CommonInfoReadResponse.FromString,
                )
        self.commonInfoUpdate = channel.unary_unary(
                '/CommonInfoService/commonInfoUpdate',
                request_serializer=root_dot_message__pb2.CommonInfoUpdateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.commonInfoDelete = channel.unary_unary(
                '/CommonInfoService/commonInfoDelete',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.OkMessage.FromString,
                )
        self.commonInfoList = channel.unary_unary(
                '/CommonInfoService/commonInfoList',
                request_serializer=root_dot_message__pb2.CommonInfoListRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.CommonInfoListResponse.FromString,
                )


class CommonInfoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def commonInfoCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commonInfoRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commonInfoUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commonInfoDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commonInfoList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommonInfoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'commonInfoCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.commonInfoCreate,
                    request_deserializer=root_dot_message__pb2.CommonInfoCreateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'commonInfoRead': grpc.unary_unary_rpc_method_handler(
                    servicer.commonInfoRead,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.CommonInfoReadResponse.SerializeToString,
            ),
            'commonInfoUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.commonInfoUpdate,
                    request_deserializer=root_dot_message__pb2.CommonInfoUpdateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'commonInfoDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.commonInfoDelete,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.OkMessage.SerializeToString,
            ),
            'commonInfoList': grpc.unary_unary_rpc_method_handler(
                    servicer.commonInfoList,
                    request_deserializer=root_dot_message__pb2.CommonInfoListRequest.FromString,
                    response_serializer=root_dot_message__pb2.CommonInfoListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CommonInfoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CommonInfoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def commonInfoCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CommonInfoService/commonInfoCreate',
            root_dot_message__pb2.CommonInfoCreateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commonInfoRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CommonInfoService/commonInfoRead',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.CommonInfoReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commonInfoUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CommonInfoService/commonInfoUpdate',
            root_dot_message__pb2.CommonInfoUpdateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commonInfoDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CommonInfoService/commonInfoDelete',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.OkMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commonInfoList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CommonInfoService/commonInfoList',
            root_dot_message__pb2.CommonInfoListRequest.SerializeToString,
            root_dot_message__pb2.CommonInfoListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AmmoInfoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ammoInfoCreate = channel.unary_unary(
                '/AmmoInfoService/ammoInfoCreate',
                request_serializer=root_dot_message__pb2.AmmoInfoCreateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.ammoInfoRead = channel.unary_unary(
                '/AmmoInfoService/ammoInfoRead',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.AmmoInfoReadResponse.FromString,
                )
        self.ammoInfoUpdate = channel.unary_unary(
                '/AmmoInfoService/ammoInfoUpdate',
                request_serializer=root_dot_message__pb2.AmmoInfoUpdateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.ammoInfoDelete = channel.unary_unary(
                '/AmmoInfoService/ammoInfoDelete',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.OkMessage.FromString,
                )
        self.ammoInfoList = channel.unary_unary(
                '/AmmoInfoService/ammoInfoList',
                request_serializer=root_dot_message__pb2.AmmoInfoListRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.AmmoInfoListResponse.FromString,
                )


class AmmoInfoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ammoInfoCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ammoInfoRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ammoInfoUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ammoInfoDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ammoInfoList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AmmoInfoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ammoInfoCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.ammoInfoCreate,
                    request_deserializer=root_dot_message__pb2.AmmoInfoCreateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'ammoInfoRead': grpc.unary_unary_rpc_method_handler(
                    servicer.ammoInfoRead,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.AmmoInfoReadResponse.SerializeToString,
            ),
            'ammoInfoUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.ammoInfoUpdate,
                    request_deserializer=root_dot_message__pb2.AmmoInfoUpdateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'ammoInfoDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.ammoInfoDelete,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.OkMessage.SerializeToString,
            ),
            'ammoInfoList': grpc.unary_unary_rpc_method_handler(
                    servicer.ammoInfoList,
                    request_deserializer=root_dot_message__pb2.AmmoInfoListRequest.FromString,
                    response_serializer=root_dot_message__pb2.AmmoInfoListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AmmoInfoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AmmoInfoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ammoInfoCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AmmoInfoService/ammoInfoCreate',
            root_dot_message__pb2.AmmoInfoCreateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ammoInfoRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AmmoInfoService/ammoInfoRead',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.AmmoInfoReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ammoInfoUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AmmoInfoService/ammoInfoUpdate',
            root_dot_message__pb2.AmmoInfoUpdateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ammoInfoDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AmmoInfoService/ammoInfoDelete',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.OkMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ammoInfoList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AmmoInfoService/ammoInfoList',
            root_dot_message__pb2.AmmoInfoListRequest.SerializeToString,
            root_dot_message__pb2.AmmoInfoListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FlowsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.flowsCreate = channel.unary_unary(
                '/FlowsService/flowsCreate',
                request_serializer=root_dot_message__pb2.FlowsCreateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.flowsRead = channel.unary_unary(
                '/FlowsService/flowsRead',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.FlowsReadResponse.FromString,
                )
        self.flowsUpdate = channel.unary_unary(
                '/FlowsService/flowsUpdate',
                request_serializer=root_dot_message__pb2.FlowsUpdateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.flowsDelete = channel.unary_unary(
                '/FlowsService/flowsDelete',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.OkMessage.FromString,
                )
        self.flowsList = channel.unary_unary(
                '/FlowsService/flowsList',
                request_serializer=root_dot_message__pb2.FlowsListRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.FlowsListResponse.FromString,
                )
        self.flowsOnScan = channel.unary_unary(
                '/FlowsService/flowsOnScan',
                request_serializer=root_dot_message__pb2.FlowsOnScanRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.FlowsOnScanResponse.FromString,
                )
        self.flowsListen = channel.unary_stream(
                '/FlowsService/flowsListen',
                request_serializer=root_dot_message__pb2.OkMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.FlowsReadResponse.FromString,
                )


class FlowsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def flowsCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def flowsRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def flowsUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def flowsDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def flowsList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def flowsOnScan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def flowsListen(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlowsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'flowsCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.flowsCreate,
                    request_deserializer=root_dot_message__pb2.FlowsCreateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'flowsRead': grpc.unary_unary_rpc_method_handler(
                    servicer.flowsRead,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.FlowsReadResponse.SerializeToString,
            ),
            'flowsUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.flowsUpdate,
                    request_deserializer=root_dot_message__pb2.FlowsUpdateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'flowsDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.flowsDelete,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.OkMessage.SerializeToString,
            ),
            'flowsList': grpc.unary_unary_rpc_method_handler(
                    servicer.flowsList,
                    request_deserializer=root_dot_message__pb2.FlowsListRequest.FromString,
                    response_serializer=root_dot_message__pb2.FlowsListResponse.SerializeToString,
            ),
            'flowsOnScan': grpc.unary_unary_rpc_method_handler(
                    servicer.flowsOnScan,
                    request_deserializer=root_dot_message__pb2.FlowsOnScanRequest.FromString,
                    response_serializer=root_dot_message__pb2.FlowsOnScanResponse.SerializeToString,
            ),
            'flowsListen': grpc.unary_stream_rpc_method_handler(
                    servicer.flowsListen,
                    request_deserializer=root_dot_message__pb2.OkMessage.FromString,
                    response_serializer=root_dot_message__pb2.FlowsReadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FlowsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FlowsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def flowsCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FlowsService/flowsCreate',
            root_dot_message__pb2.FlowsCreateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def flowsRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FlowsService/flowsRead',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.FlowsReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def flowsUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FlowsService/flowsUpdate',
            root_dot_message__pb2.FlowsUpdateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def flowsDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FlowsService/flowsDelete',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.OkMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def flowsList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FlowsService/flowsList',
            root_dot_message__pb2.FlowsListRequest.SerializeToString,
            root_dot_message__pb2.FlowsListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def flowsOnScan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FlowsService/flowsOnScan',
            root_dot_message__pb2.FlowsOnScanRequest.SerializeToString,
            root_dot_message__pb2.FlowsOnScanResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def flowsListen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/FlowsService/flowsListen',
            root_dot_message__pb2.OkMessage.SerializeToString,
            root_dot_message__pb2.FlowsReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AlertServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.alertCreate = channel.unary_unary(
                '/AlertService/alertCreate',
                request_serializer=root_dot_message__pb2.AlertCreateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.alertRead = channel.unary_unary(
                '/AlertService/alertRead',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.AlertReadResponse.FromString,
                )
        self.alertList = channel.unary_unary(
                '/AlertService/alertList',
                request_serializer=root_dot_message__pb2.AlertListRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.AlertListResponse.FromString,
                )


class AlertServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def alertCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def alertRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def alertList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AlertServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'alertCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.alertCreate,
                    request_deserializer=root_dot_message__pb2.AlertCreateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'alertRead': grpc.unary_unary_rpc_method_handler(
                    servicer.alertRead,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.AlertReadResponse.SerializeToString,
            ),
            'alertList': grpc.unary_unary_rpc_method_handler(
                    servicer.alertList,
                    request_deserializer=root_dot_message__pb2.AlertListRequest.FromString,
                    response_serializer=root_dot_message__pb2.AlertListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AlertService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AlertService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def alertCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AlertService/alertCreate',
            root_dot_message__pb2.AlertCreateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def alertRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AlertService/alertRead',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.AlertReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def alertList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AlertService/alertList',
            root_dot_message__pb2.AlertListRequest.SerializeToString,
            root_dot_message__pb2.AlertListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AuthServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.signIn = channel.unary_unary(
                '/AuthService/signIn',
                request_serializer=root_dot_message__pb2.SignInRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.SignInResponse.FromString,
                )
        self.signOut = channel.unary_unary(
                '/AuthService/signOut',
                request_serializer=root_dot_message__pb2.OkMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.OkMessage.FromString,
                )


class AuthServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def signIn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def signOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'signIn': grpc.unary_unary_rpc_method_handler(
                    servicer.signIn,
                    request_deserializer=root_dot_message__pb2.SignInRequest.FromString,
                    response_serializer=root_dot_message__pb2.SignInResponse.SerializeToString,
            ),
            'signOut': grpc.unary_unary_rpc_method_handler(
                    servicer.signOut,
                    request_deserializer=root_dot_message__pb2.OkMessage.FromString,
                    response_serializer=root_dot_message__pb2.OkMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def signIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AuthService/signIn',
            root_dot_message__pb2.SignInRequest.SerializeToString,
            root_dot_message__pb2.SignInResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def signOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AuthService/signOut',
            root_dot_message__pb2.OkMessage.SerializeToString,
            root_dot_message__pb2.OkMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FileObjectServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.fileObjectCreate = channel.unary_unary(
                '/FileObjectService/fileObjectCreate',
                request_serializer=root_dot_message__pb2.FileObjectCreateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.fileObjectRead = channel.unary_unary(
                '/FileObjectService/fileObjectRead',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.FileObjectReadResponse.FromString,
                )
        self.fileObjectUpdate = channel.unary_unary(
                '/FileObjectService/fileObjectUpdate',
                request_serializer=root_dot_message__pb2.FileObjectUpdateRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.IdMessage.FromString,
                )
        self.fileObjectDelete = channel.unary_unary(
                '/FileObjectService/fileObjectDelete',
                request_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
                response_deserializer=root_dot_message__pb2.OkMessage.FromString,
                )
        self.fileObjectList = channel.unary_unary(
                '/FileObjectService/fileObjectList',
                request_serializer=root_dot_message__pb2.FileObjectListRequest.SerializeToString,
                response_deserializer=root_dot_message__pb2.FileObjectListResponse.FromString,
                )


class FileObjectServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def fileObjectCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fileObjectRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fileObjectUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fileObjectDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fileObjectList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileObjectServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'fileObjectCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.fileObjectCreate,
                    request_deserializer=root_dot_message__pb2.FileObjectCreateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'fileObjectRead': grpc.unary_unary_rpc_method_handler(
                    servicer.fileObjectRead,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.FileObjectReadResponse.SerializeToString,
            ),
            'fileObjectUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.fileObjectUpdate,
                    request_deserializer=root_dot_message__pb2.FileObjectUpdateRequest.FromString,
                    response_serializer=root_dot_message__pb2.IdMessage.SerializeToString,
            ),
            'fileObjectDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.fileObjectDelete,
                    request_deserializer=root_dot_message__pb2.IdMessage.FromString,
                    response_serializer=root_dot_message__pb2.OkMessage.SerializeToString,
            ),
            'fileObjectList': grpc.unary_unary_rpc_method_handler(
                    servicer.fileObjectList,
                    request_deserializer=root_dot_message__pb2.FileObjectListRequest.FromString,
                    response_serializer=root_dot_message__pb2.FileObjectListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FileObjectService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileObjectService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def fileObjectCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileObjectService/fileObjectCreate',
            root_dot_message__pb2.FileObjectCreateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fileObjectRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileObjectService/fileObjectRead',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.FileObjectReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fileObjectUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileObjectService/fileObjectUpdate',
            root_dot_message__pb2.FileObjectUpdateRequest.SerializeToString,
            root_dot_message__pb2.IdMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fileObjectDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileObjectService/fileObjectDelete',
            root_dot_message__pb2.IdMessage.SerializeToString,
            root_dot_message__pb2.OkMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fileObjectList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileObjectService/fileObjectList',
            root_dot_message__pb2.FileObjectListRequest.SerializeToString,
            root_dot_message__pb2.FileObjectListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
